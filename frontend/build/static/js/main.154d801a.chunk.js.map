{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FormItem","Form","Item","EditableContext","React","createContext","TextArea","Input","EditableFormRow","create","_ref","form","props","index","Object","objectWithoutProperties","react_default","a","createElement","Provider","value","EditableCell","state","editing","toggleEdit","_this","setState","input","focus","handleClickOutside","e","cell","target","contains","save","_this$props","record","handleSave","validateFields","error","values","objectSpread","this","editable","document","addEventListener","removeEventListener","_this2","_this$props2","dataIndex","title","restProps","assign","ref","node","Consumer","style","margin","getFieldDecorator","rules","required","message","concat","initialValue","onPressEnter","autosize","className","paddingRight","onClick","react_markdown_default","source","children","renderers","code","_ref2","es_alert","type","Component","App","_this3","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleDelete","id","dataSource","toConsumableArray","filter","item","axios","delete","then","notification","success","catch","row","newData","findIndex","splice","put","text","body","handleSearch","search","showDrawer","drawerVisible","hideDrawer","handleSubmit","preventDefault","err","post","getAllEntries","columns","width","render","length","popconfirm","onConfirm","href","_this4","loading","get","response","data","fieldsError","_this5","_this$state","_this$props$form","getFieldsError","getFieldError","textError","isFieldTouched","components","map","col","onCell","sortedDataSource","ds","includes","sort","b","Date","createdAt","onChange","size","placeholder","table","rowKey","rowClassName","bordered","es_button","drawer","placement","closable","onClose","visible","es_form","onSubmit","validateStatus","help","htmlType","disabled","keys","some","field","name","Boolean","window","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.154d801a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport {\n  Table,\n  Input,\n  Button,\n  Popconfirm,\n  Form,\n  notification,\n  Drawer,\n  Icon,\n  Alert\n} from \"antd\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext();\nconst { TextArea } = Input;\n\nconst EditableRow = ({ form, index, ...props }) => (\n  <EditableContext.Provider value={form}>\n    <tr {...props} />\n  </EditableContext.Provider>\n);\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  state = {\n    editing: false\n  };\n\n  componentDidMount() {\n    if (this.props.editable) {\n      document.addEventListener(\"click\", this.handleClickOutside, true);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.editable) {\n      document.removeEventListener(\"click\", this.handleClickOutside, true);\n    }\n  }\n\n  toggleEdit = () => {\n    const editing = !this.state.editing;\n    this.setState({ editing }, () => {\n      if (editing) {\n        this.input.focus();\n      }\n    });\n  };\n\n  handleClickOutside = e => {\n    const { editing } = this.state;\n    if (editing && this.cell !== e.target && !this.cell.contains(e.target)) {\n      this.save();\n    }\n  };\n\n  save = () => {\n    const { record, handleSave } = this.props;\n    this.form.validateFields((error, values) => {\n      if (error) {\n        return;\n      }\n      this.toggleEdit();\n      handleSave({ ...record, ...values });\n    });\n  };\n\n  render() {\n    const { editing } = this.state;\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      ...restProps\n    } = this.props;\n    return (\n      <td ref={node => (this.cell = node)} {...restProps}>\n        {editable ? (\n          <EditableContext.Consumer>\n            {form => {\n              this.form = form;\n              return editing ? (\n                <FormItem style={{ margin: 0 }}>\n                  {form.getFieldDecorator(dataIndex, {\n                    rules: [\n                      {\n                        required: true,\n                        message: `${title} is required.`\n                      }\n                    ],\n                    initialValue: record[dataIndex]\n                  })(\n                    <TextArea\n                      ref={node => (this.input = node)}\n                      onPressEnter={this.save}\n                      autosize\n                    />\n                  )}\n                </FormItem>\n              ) : (\n                <pre\n                  className=\"editable-cell-value-wrap\"\n                  style={{ paddingRight: 24 }}\n                  onClick={this.toggleEdit}\n                >\n                  <ReactMarkdown\n                    source={restProps.children[2]}\n                    renderers={{\n                      code: ({ value }) => {\n                        return <Alert message={value} type=\"info\" />;\n                      }\n                    }}\n                  />\n                </pre>\n              );\n            }}\n          </EditableContext.Consumer>\n        ) : (\n          restProps.children\n        )}\n      </td>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.columns = [\n      {\n        title: \"Id\",\n        dataIndex: \"id\"\n      },\n      {\n        title: \"Text\",\n        dataIndex: \"body\",\n        editable: true\n      },\n      {\n        title: \"Rating\",\n        dataIndex: \"rating\"\n      },\n      {\n        title: \"Created\",\n        dataIndex: \"createdAt\"\n      },\n      {\n        title: \"Action\",\n        dataIndex: \"operation\",\n        width: 100,\n        render: (text, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <div style={{ width: 100 }}>\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => this.handleDelete(record.id)}\n              >\n                <a href=\"javascript:;\">Delete</a>\n              </Popconfirm>\n            </div>\n          ) : null\n      }\n    ];\n\n    this.state = {\n      search: \"\",\n      dataSource: [],\n      drawerVisible: false\n    };\n  }\n\n  componentDidMount() {\n    this.getAllEntries();\n  }\n\n  getAllEntries() {\n    this.setState({ loading: true });\n    axios.get(\"/api/entries\").then(response => {\n      this.setState({ dataSource: response.data, loading: false });\n    });\n  }\n\n  handleDelete = id => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({ dataSource: dataSource.filter(item => item.id !== id) });\n    axios\n      .delete(`/api/entries/${id}`)\n      .then(() => {\n        notification.success({\n          message: \"УДОЛИЛ!\"\n        });\n      })\n      .catch(() => {\n        notification.error({\n          message: \"чот пошло не так!\"\n        });\n      });\n  };\n\n  handleSave = row => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex(item => row.id === item.id);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row\n    });\n    this.setState({ dataSource: newData });\n    axios\n      .put(`/api/entries/${row.id}`, { text: row.body })\n      .then(() => {\n        notification.success({\n          message: \"СОХРОНИЛ!\"\n        });\n      })\n      .catch(() => {\n        notification.error({\n          message: \"чот пошло не так!\"\n        });\n      });\n  };\n\n  handleSearch = e => {\n    this.setState({ search: e.target.value });\n  };\n\n  showDrawer = () => {\n    this.setState({\n      drawerVisible: true\n    });\n  };\n\n  hideDrawer = () => {\n    this.setState({\n      drawerVisible: false\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.hideDrawer();\n        axios\n          .post(\"/api/entries/\", { text: values.text })\n          .then(() => {\n            notification.success({\n              message: \"СОЗДОЛОСЬ!\"\n            });\n            this.getAllEntries();\n          })\n          .catch(() => {\n            notification.error({\n              message: \"чот пошло не так!\"\n            });\n          });\n      }\n    });\n  };\n\n  render() {\n    const { dataSource, search } = this.state;\n    const {\n      getFieldDecorator,\n      getFieldsError,\n      getFieldError,\n      isFieldTouched\n    } = this.props.form;\n\n    const textError = getFieldError(\"text\");\n\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n\n    const filteredDataSource = dataSource.filter(ds => {\n      return ds.body.includes(search);\n    });\n\n    const sortedDataSource = filteredDataSource.sort((a, b) => {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    });\n\n    return (\n      <div className=\"app\">\n        <div className=\"search\">\n          <Input\n            onChange={this.handleSearch}\n            value={search}\n            size=\"large\"\n            placeholder=\"Search\"\n          />\n        </div>\n        <Table\n          rowKey=\"id\"\n          components={components}\n          rowClassName={() => \"editable-row\"}\n          bordered\n          dataSource={sortedDataSource}\n          columns={columns}\n          loading={this.state.loading}\n        />\n        <Button type=\"primary\" onClick={this.showDrawer}>\n          КРИЭЙТ!\n        </Button>\n        <Drawer\n          width={640}\n          title=\"СОЗДАЙ\"\n          placement=\"right\"\n          closable={false}\n          onClose={this.hideDrawer}\n          visible={this.state.drawerVisible}\n        >\n          <Form onSubmit={this.handleSubmit}>\n            <Form.Item\n              validateStatus={textError ? \"error\" : \"\"}\n              help={textError || \"\"}\n            >\n              {getFieldDecorator(\"text\", {\n                rules: [\n                  {\n                    required: true,\n                    message: \"Ну ты введи йоп текст, че как не пацан?\"\n                  }\n                ]\n              })(<TextArea placeholder=\"Текст-хуекст\" autosize />)}\n            </Form.Item>\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={hasErrors(getFieldsError())}\n              >\n                СОХРОНИ\n              </Button>\n            </Form.Item>\n          </Form>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nexport default Form.create({ name: \"create_form\" })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}